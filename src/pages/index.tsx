import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRightFromBracket, faList, faSpinner } from "@fortawesome/free-solid-svg-icons";
import Hero from "../components/Hero";
import SidebarList from "../components/SidebarList";
import SearchBar from "../components/SearchBar";

import { type NextPage } from "next";
import { useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";

import type { Media } from "../types/interface";

const Home: NextPage = () => {
  const session = useSession()
  const utils = trpc.useContext()
  const user = trpc.user.getUser.useQuery()
  const listItems = trpc.listItem.getUserListItems.useQuery()
  const { data: trending } = trpc.media.getTrendingData.useQuery()

  const [show, setShow] = useState(false)

  const addListItemToDB = trpc.listItem.newListItem.useMutation()
  const removeListItemFromDB = trpc.listItem.removeListItem.useMutation()
  
  
  if(!trending || session.status === "loading" || listItems.isLoading || user.isLoading){

    return (
      <div className="w-screen h-screen bg-slate-600 flex flex-col gap-8 justify-center items-center">
        <FontAwesomeIcon spin icon={faSpinner} size={"10x"}/>
        <div className="text-white font-bold cursor-pointer p-6 bg-black">Loading...</div>
      </div>
      )

  } else if(listItems.error || user.error || session.status === "unauthenticated"){

    return (
      <div className="w-screen h-screen bg-slate-600 flex justify-center items-center">
        <div className="text-white font-bold cursor-pointer p-6 bg-black" onClick={()=>signIn()}>Sign In</div>
      </div>
    )

  } else {

    const addListItem = (newListItem:{media:Media, userID:string}) =>{
      addListItemToDB.mutate(newListItem, {onSuccess:async ()=>{ utils.listItem.getUserListItems.invalidate()}})
      return addListItemToDB.isLoading ? true : false
    }
    const removeListItem = (id:string) =>{
      removeListItemFromDB.mutate(id, {onSuccess:async ()=>{ utils.listItem.getUserListItems.invalidate()}})
      return removeListItemFromDB.isLoading ? true : false
    }
    const classes = {
      profile: show ? "absolute top-0 right-0 flex flex-col justify-between items-around self-start bg-black max-w-min w-2/12 h-screen text-white" : "block",
      link: show ? "flex flex-col justify-center items-between" : "hidden",
      btn: show ? "w-6 cursor-pointer" : "hidden",
      spacer: show? "w-12" : "hidden",
      image: show ? 'rounded-full max-h-full max-w-none m-2' : 'rounded-full max-h-full max-w-none',
    }

    function getUserImageURL(){
        if(session){
            if(session.data?.user !== undefined){
                if(session.data.user.image!== null && session.data.user.image !== undefined){
                    return session.data.user.image
                }
            }
        }
        return ""
    }
    const userImageURL = getUserImageURL()


    return (
      <>
        <Head>
          <title>StreamSave</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <header className="flex justify-start items-center p-4 gap-4 bg-slate-600 fixed h-16 text-white top-0 z-50 w-screen" onClick={()=> show && setShow(false)}>
              <div className='hidden md:block'>
                  <Link  
                      href={"/"} >
                      <h1>StreamSave</h1>
                  </Link>
              </div>
              <SearchBar listItems={listItems.data ? listItems.data : undefined} addListItem={addListItem} removeListItem={removeListItem} session={session.data}/>
              {session.data ?
              <>
                  <div className={classes.spacer}>

                  </div>
                  <div className={classes.profile} onClick={()=> setShow(!show)}>
                      <Image className={classes.image} onClick={()=> { setShow(!show) }} alt={"user profile from your email"} src={userImageURL} height={46} width={46} />
                      <Link href={"/#list"} className={classes.link}>     
                          <FontAwesomeIcon className='w-6 cursor-pointer' icon={faList}/>
                      </Link>
                      <FontAwesomeIcon icon={faArrowRightFromBracket} className={classes.btn} onClick={()=>{signOut()}}/>
                  </div>
              </>
              :
                  <button onClick={()=>signIn("google")}>Sign In w/ Google</button>

              }
          </header>
        <body className="bg-slate-300 mt-16 z-0">
          <div className="flex justify-center max-w-8xl">
            <Hero trending={trending} listItems={listItems.data ? listItems.data : undefined} addListItem={addListItem} removeListItem={removeListItem} session={session.data} user={user.data ? user.data : null} />
            {listItems.data && <SidebarList listItems={listItems.data} removeListItem={removeListItem} />}
          </div>
        </body>
      </>
    );
  }};

export default Home;